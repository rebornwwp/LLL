stage('args_check'){
    // container config
    if(env.compile_container_name && it != 'null'){compile_container_name = env.compile_container_name}
    if(env.USE_LLVM_CACHE && it != 'null'){use_llvm_cache = env.USE_LLVM_CACHE}
    if(env.compile_container_label && it != 'null'){
        compile_container_label =''
        for (_ in env.compile_container_label.split(';')){
            tmp=[]
            tmp=_.split('=')
            //yaml 语法规则，注意文本缩进
            if ('In' == tmp[0]){
                compile_container_label+="""
            - key: ${tmp[1]}
              operator: In
              values:
              - ${tmp[2]}
            """
            }
            else if ('NotIn' == tmp[0]){
                compile_container_label+="""
            - key: ${tmp[1]}
              operator: NotIn
              values:
              - ${tmp[2]}
            """
            }
        }
    }
    if(env.compile_container_resources && it != 'null'){
        compile_container_requests =''
        compile_container_limits =''
        for (_ in env.compile_container_resources.split(';')){
            tmp=[]
            tmp=_.split('=')
            if ('requests' == tmp[0]){
                compile_container_requests+="""
                        ${tmp[1]}: ${tmp[2]}
                """
            }
            else if ('limits' == tmp[0]){
                compile_container_limits+="""
                        ${tmp[1]}: ${tmp[2]}
                """
            }
        }
    }

    // repo config
    if(env.work_directory && it != 'null'){work_directory = env.work_directory}
    if(env.compile_rely_pkg_url && it != 'null'){
        compile_rely_pkg_url = []
        for (_ in env.compile_rely_pkg_url.split(';')){
            if(_){
                compile_rely_pkg_url.add(_)
            }
        }
    }
    // compile config
    if(env.compile_env_var && it != 'null'){compile_env_var = env.compile_env_var}
    if(env.compile_generate_pkg_url && it != 'null'){
        compile_generate_pkg_url = []
        for (_ in env.compile_generate_pkg_url.split(';')){
            if(_){
                compile_generate_pkg_url.add(_)
            }
        }
    }
    if (env.mttx_branch && it != 'null') {mttx_branch=env.mttx_branch}
    if (env.gcov && it != 'null') {gcov=env.gcov}
    if (env.coverage_pkg_url && it != 'null') {coverage_pkg_url = env.coverage_pkg_url}
    if(env.debug_time && env.debug_time != 'null'){debug_time = env.debug_time}
    if(env.upload_debug && env.upload_debug != 'null'){upload_debug = env.upload_debug}
    ssh_port = "1${('111'+BUILD_NUMBER)[-4..-1]}"
}

flag='build'
x = """
apiVersion: v1
kind: Pod
metadata:
name: computeQA
labels: 
  JOB_NAME: ${JOB_NAME}
spec:
    dnsConfig: {}
    dnsPolicy: Default
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions: ${compile_container_label}
        preferredDuringSchedulingIgnoredDuringExecution: 
        - weight: 1
          preference: 
            matchExpressions: 
            - key: PLATFORM
              operator: In
              values: 
              - cpu
    containers:
        - name: jnlp
          image: sh-harbor.mthreads.com/qa/jenkins-agent:v1
        - name: compile
          image: ${compile_container_name}
          imagePullPolicy: Always
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          ports:
            - name: http
              containerPort: ${ssh_port}
              hostPort: ${ssh_port}
              protocol: TCP
          command:
            - sleep
          args:
            - 99d
          resources:
            limits: ${compile_container_limits}
            requests: ${compile_container_requests}
"""
println x
try{
    podTemplate(cloud: env.Kubernetes, yaml:x){
        node(POD_LABEL) {
            container('compile') {
                catchError(stageResult: 'FAILURE'){
                    def nodeName=sh script:"echo \$MY_NODE_NAME",returnStdout:true
                    sh """
                        printf "\nPort ${ssh_port}\nPermitRootLogin yes\n" >>/etc/ssh/sshd_config
                        printf "123456\n123456\n" |passwd root
                        /etc/init.d/ssh restart
                    """
                    currentBuild.description = "sshpass -p '123456' ssh -o 'StrictHostKeyChecking=no' root@${nodeName} -p ${ssh_port} <br>cd ${WORKSPACE}"
                    mtgpuID = sh(script:'ls /dev/mtgpu* ||:',returnStdout:true).trim()
                    currentBuild.description += "<br>mtgpuID:${mtgpuID}"
                }
            try{
                nodeName=sh script:"echo \$MY_NODE_NAME",returnStdout:true
                currentBuild.description += "<br> Build_Node: ${nodeName}"

                mttx_repo_name='mtTX'
                mttx_dir = "${env.WORKSPACE}/${mttx_repo_name}"
                commit_id = ""

                stage('checkout') {
                    echo '开始拉取代码.....'
                    def jenkins_repoName = "${work_directory}/jenkinsfile"
                    sh "mkdir -p ${work_directory}"
                    dir(jenkins_repoName) {
                        git branch: env.jenkinsfile_branch[7..-1], credentialsId: 'githubSSH', url: 'git@github.mthreads.com:mthreads/jenkinsfile.git'
                        compute_libs = load 'compute_pipelines/compute_libs.groovy'
                        common_libs = load 'lib/common.groovy'
                    }

                    dir(mttx_dir) {
                        compute_libs.checkoutFunc(mttx_repo_name, mttx_branch, true)
                        withCredentials([sshUserPrivateKey(credentialsId: 'githubSSH', keyFileVariable: 'PKEY')]){
                            withEnv(["GIT_SSH_COMMAND=ssh -i $PKEY -o StrictHostKeyChecking=no"]) {
                                if(use_llvm_cache == "OFF"){
                                    sh """
                                        git submodule update --init --recursive -- 3rdparty/llvm-project
                                    """
                                }
                                sh """
                                    git submodule update --init --recursive -- 3rdparty/mtMemoryPool
                                    git submodule update --init --recursive -- 3rdparty/asm_kern/ComputeAsmKern
                                """
                            }
                        }
                        
                        commit_id = sh script:'git rev-parse HEAD', returnStdout:true trim()
                    }
                    dir(work_directory+'musa_toolkit'){
                        compute_libs.checkoutFunc 'musa_toolkit', 'master', true
                    }
                    compile_rely_pkg_url.each{
                        compute_libs.download_pkg it,work_directory
                    }
                }
                stage('clang-format') {
                    dir(mttx_dir){
                        sh """#! /bin/bash
                        find include/ lib/ tools/ test/ -type f | grep -E \"\\.(cpp|h)\$\" | xargs clang-format-12 -i
                        count=\$(git status -s | wc -l)
                        if [[ \$count == \"0\" ]]; then
                            echo \"format check pass\"
                        else
                            echo \"code style is not used by clang-format, please use 'find include/ lib/ tools/ test/ -type f | grep -E '\\.(cpp|h)\$' | xargs clang-format-12 -i' before push to github\"
                            exit 1
                        fi
                        """
                    }
                }
                
                stage('deploy'){
                    dir(work_directory){
                        sh "tar xf umd*.tar && gr_umd_dist/*mtgpu_linux*/install.sh && ldconfig /usr/lib/`uname -m`-linux-gnu/musa"
                        sh """
                            if [ -e ${work_directory}musa_toolkits_install*.tar.gz ]; then
                                echo musa_toolkits
                                cd ${work_directory}
                                tar xf musa_toolkits_install*.tar.gz && cd musa_toolkits_install && ./install.sh
                            else
                                echo mcc and musart
                                cd ${work_directory} && mkdir -p ${work_directory}musa_install
                                tar xf mtcc-*-x86_64-linux-gnu-ubuntu-20.04.tar.gz -C ${work_directory}musa_install
                                ls *MUSA*Runtime*.tar.gz | xargs -t -i -n1 tar xzvf {} -C ${work_directory}musa_install
                                cd ${work_directory}musa_install/MUSA-Runtime && ./install.sh && cd .. && ./install.sh
                                cd ${work_directory}musa_toolkit && cp -r cmake /usr/local/musa/
                            fi
                        """
                    }
                }

                stage('debug-compile') {
                    dir(mttx_dir) {
                        if(use_llvm_cache == "ON"){
                            sh """
                                rm -rf 3rdparty/llvm-project
                                mv /workspace/debug-llvm-project 3rdparty/llvm-project
                            """
                        }
                        sh """
                            ls -al /usr/local/musa/bin
                            ${compile_env_var}
                            export PATH=/usr/local/musa/bin:\$PATH;
                            which llvm-mc
                            which mcc
                            ln -s ${mttx_dir} /workspace/${mttx_repo_name}
                            cd /workspace/${mttx_repo_name}
                            ./build-debug.sh -c ${use_llvm_cache}
                        """
                    }
                }
                stage("upload_debug_package") {
                    dir(work_directory) {
                        sh """
                            cd /workspace/${mttx_repo_name}
                            ls
                            cd /workspace/${mttx_repo_name}/build
                            printf \' \
                                project:${mttx_repo_name}\\n \
                                branch:${mttx_branch}\\n \
                                commitID:${commit_id}\\n \
                                buildType:DEBUG\\n \
                            \' > ./${env.BUILD_TIMESTAMP+mttx_repo_name+'.txt'}
                            tar cf ${work_directory}/mttx_debug.tar mttx ${env.BUILD_TIMESTAMP+mttx_repo_name+'.txt'}
                        """
                    }
                    if (upload_debug == "true") {
                        compile_generate_pkg_url.each{
                            val -> compute_libs.upload_pkg(work_directory+"mttx_debug.tar", val)
                        }
                    }
                }

                stage("clang-tidy"){
                    dir(mttx_dir) {
                        sh"""
                        find lib -type f | grep -E "\\.(cpp|cc)\$" | xargs /usr/lib/llvm-12/share/clang/run-clang-tidy.py -quiet -p=./build
                        """
                    }
                }

                stage('release-compile') {
                    if (gcov == "ON") {
                        sh """
                            ${compile_env_var}
                            cd /workspace/${mttx_repo_name}
                            rm -rf build
                            ./build.sh -c ${use_llvm_cache} -g ON
                            cd /workspace
                            cd /home/jenkins/agent/workspace/756_compile_mtTensorX/
                            find . -name *.gcno
                            ls -al
                            tar cf ${work_directory}mttx_gcno.tar `find . -name *.gcno`
                            cd /workspace/${mttx_repo_name}/build
                            tar cf ${work_directory}mttx_gcov.tar mttx
                            
                            rm -rf /workspace/${mttx_repo_name}/build
                            cd /workspace
                            tar -pzcf ${work_directory}mttx_src.tar.gz ${mttx_repo_name}/*
                        """
                    }
                    sh """
                        ${compile_env_var}
                        cd /workspace/${mttx_repo_name}
                        ./build.sh -c ${use_llvm_cache}
                    """

                }

                stage("upload_package") {
                    dir(work_directory) {
                        sh """#! /bin/bash
                            cd /workspace/${mttx_repo_name}
                            ls
                            pwd
                            cd /workspace/${mttx_repo_name}/build
                            printf \' \
                                project:${mttx_repo_name}\\n \
                                branch:${mttx_branch}\\n \
                                commitID:${commit_id}\\n \
                                buildType:RELEASE\\n \
                            \' > ./${env.BUILD_TIMESTAMP+mttx_repo_name+'.txt'}
                            tar cf ${work_directory}/mttx.tar mttx ${env.BUILD_TIMESTAMP+mttx_repo_name+'.txt'}
                        """
                    }

                    compile_generate_pkg_url.each{
                        val -> compute_libs.upload_pkg(work_directory+"mttx.tar", val)
                    }
                    if (gcov == "ON") {
                        compute_libs.upload_pkg(work_directory+"mttx_gcov.tar", coverage_pkg_url)
                        compute_libs.upload_pkg(work_directory+"mttx_gcno.tar", coverage_pkg_url)
                        compute_libs.upload_pkg(work_directory+"mttx_src.tar", coverage_pkg_url)
                    }
                }
            }
            catch(e){
                print e
                currentBuild.result = 'FAIL'
            }
            finally{
                if(debug_time){
                    timeout(debug_time.toInteger()) {
                        input 'debug_time'
                    }
                }
            }
            }
        }
    }
}
catch(e) {
    print(e)
    error "compile fail"
}