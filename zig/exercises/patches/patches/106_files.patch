--- exercises/106_files.zig	2024-11-09 20:33:07.455580904 +0100
+++ answers/106_files.zig	2024-11-09 20:33:30.394785215 +0100
@@ -1,22 +1,22 @@
 //
 // Until now, we've only been printing our output in the console,
-// which is good enough for fighting aliens and hermit bookkeeping.
+// which is good enough for fighting alien and hermit bookkeeping.
 //
-// However, many other tasks require some interaction with the file system,
+// However, many other task require some interaction with the file system,
 // which is the underlying structure for organizing files on your computer.
 //
-// The file system provides a hierarchical structure for storing files
-// by organizing them into directories, which hold files and other directories,
-// thus creating a tree structure that can be navigated.
+// The File System provide a hierarchical structure for storing files
+// by organizing files into directories, which hold files and other directories,
+// thus creating a tree structure for navigating.
 //
-// Fortunately, the Zig Standard Library provides a simple API for interacting
-// with the file system, see the detail documentation here:
+// Fortunately, the Zig Standard Library provide a simple api for interacting
+// with the file system, see the detail documentation here
 //
 // https://ziglang.org/documentation/master/std/#std.fs
 //
-// In this exercise, we'll try to:
-//   - create a new directory,
-//   - open a file in the directory,
+// In this exercise, we'll try to
+//   - create a new directory
+//   - open a file in the directory
 //   - write to the file.
 //
 // import std as always
@@ -27,42 +27,42 @@
     const cwd: std.fs.Dir = std.fs.cwd();
 
     // then we'll try to make a new directory /output/
-    // to store our output files.
+    // to put our output files.
     cwd.makeDir("output") catch |e| switch (e) {
-        // there is a chance you might want to run this
+        // there are chance you might want to run this
         // program more than once and the path might already
-        // have been created, so we'll have to handle this error
+        // been created, so we'll have to handle this error
         // by doing nothing
         //
         // we want to catch error.PathAlreadyExists and do nothing
-        ??? => {},
-        // if there's any other unexpected error we just propagate it through
+        error.PathAlreadyExists => {},
+        // if is any other unexpected error we just propagate it through
         else => return e,
     };
 
     // then we'll try to open our freshly created directory
-    // wait a minute...
+    // wait a minute
     // opening a directory might fail!
     // what should we do here?
-    var output_dir: std.fs.Dir = cwd.openDir("output", .{});
+    var output_dir: std.fs.Dir = try cwd.openDir("output", .{});
     defer output_dir.close();
 
     // we try to open the file `zigling.txt`,
-    // and propagate any error up
+    // and propagate the error up if there are any errors
     const file: std.fs.File = try output_dir.createFile("zigling.txt", .{});
     // it is a good habit to close a file after you are done with it
     // so that other programs can read it and prevent data corruption
     // but here we are not yet done writing to the file
-    // if only there were a keyword in Zig that
-    // allowed you to "defer" code execution to the end of the scope...
-    file.close();
+    // if only there were a keyword in zig that
+    // allows you "defer" code execute to the end of scope...
+    defer file.close();
 
-    // you are not allowed to move these two lines above the file closing line!
+    // !you are not allowed to switch these two lines above the file closing line!
     const byte_written = try file.write("It's zigling time!");
     std.debug.print("Successfully wrote {d} bytes.\n", .{byte_written});
 }
 // to check if you actually write to the file, you can either,
-// 1. open the file in your text editor, or
+// 1. open the file on your text editor, or
 // 2. print the content of the file in the console with the following command
 //    >> cat ./output/zigling.txt
 //
@@ -86,7 +86,7 @@
 //
 // Question:
 //   - what should you do if you want to also read the file after opening it?
-//   - go to the documentation of the struct `std.fs.Dir` here:
+//   - go to documentation of the struct `std.fs.Dir` here
 //     https://ziglang.org/documentation/master/std/#std.fs.Dir
 //       - can you find a function for opening a file? how about deleting a file?
 //       - what kind of options can you use with those functions?
